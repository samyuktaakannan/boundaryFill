#include <GL/gl.h>
#include <GL/glut.h>
#include <iostream>
#define SCREEN_WIDTH 640
#define SCREEN_HEIGHT 480
#define MAX_VERTICES 100

using namespace std;

struct Point
{
    int x;
    int y;
};

int numVertices = 0;
Point vertices[MAX_VERTICES];

bool inside(Point curr)
{
    int numIntersections = 0;
    float x = curr.x, y = curr.y;
    Point p1, p2;
    p1 = vertices[0];
    for(int i = 0; i < numVertices; i++)
    {
        p2 = vertices[(i + 1) % numVertices];
        if (y > min(p1.y, p2.y))
        {
            if (y <= max(p1.y, p2.y))
            {
                if (x <= max(p1.x, p2.x))
                {
                    float x_int = p1.x + (y - p1.y) * (p2.x - p1.x) / (p2.y - p1.y);
                    if (p1.x == p2.x || x <= x_int)
                        numIntersections++;
                }
            }
        }
        p1 = p2;
    }
    if (numIntersections % 2 == 0)
        return false;
    else
        return true;
}

void fillPoly()
{
    float xmin = SCREEN_WIDTH, xmax = 0, ymin = SCREEN_HEIGHT, ymax = 0;
    for (int i = 0; i < numVertices; i++)
    {
        if (vertices[i].x < xmin)
            xmin = vertices[i].x;
        else if (vertices[i].x > xmax)
            xmax = vertices[i].x;
        if (vertices[i].y < ymin)
            ymin = vertices[i].y;
        else if (vertices[i].y > ymax)
            ymax = vertices[i].y;
    }
    glColor3f(1, 0, 0);
    for (int y = ymin; y <= ymax; y++)
    {
        for (int x = xmin; x <= xmax; x++)
        {
            Point p1;
            p1.x = x;
            p1.y = y;
            if (inside(p1))
            {
                glBegin(GL_POINTS);
                glVertex2f(x, y);
                glEnd();
            }
        }
    }
    glFlush();
}

void mouseHandling(int button, int state, int x, int y)
{
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
    {
        if (numVertices < MAX_VERTICES)
        {
            vertices[numVertices].x = x;
            vertices[numVertices].y = SCREEN_HEIGHT - y;
            numVertices++;
            glutPostRedisplay();
        }
    }
    if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
    {
        fillPoly();
    }
}

void init()
{
    glClearColor(1.0, 1.0, 1.0, 0);
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0.0, 0.0, 1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, SCREEN_WIDTH, 0.0, SCREEN_HEIGHT);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    glFlush();
}

void drawPolygon()
{
    glBegin(GL_LINE_LOOP);
    for (int i = 0; i < numVertices; i++)
        glVertex2i(vertices[i].x, vertices[i].y);
    glEnd();
    glFlush();
}

static void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glColor3f(1, 1, 1);
    glColor3f(1, 0, 0);
    drawPolygon();
    glFlush();
}

int main(int argc, char **argv)
{
    glutInit(&argc, argv);
    glutInitWindowPosition(100, 100);
    glutInitWindowSize(SCREEN_WIDTH, SCREEN_HEIGHT);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutCreateWindow("Odd parity");
    init();
    glutDisplayFunc(display);
    glutMouseFunc(mouseHandling);
    glutMainLoop();
    return 0;
}
